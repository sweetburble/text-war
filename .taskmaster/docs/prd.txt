### <context>

#### Overview
Text War는 사용자가 텍스트 설명을 통해 자신만의 고유한 캐릭터를 생성하고, 다른 사용자의 캐릭터와 AI가 판정하는 배틀을 즐길 수 있는 Android 모바일 애플리케이션입니다. 이 게임은 창의적인 글쓰기를 좋아하는 사용자, AI 기술에 관심 있는 사용자, 그리고 간단하면서도 독특한 경쟁을 즐기고 싶은 사용자들을 위한 것입니다. Text War는 사용자의 상상력을 자극하고, AI를 통해 예측 불가능하고 흥미로운 배틀 경험을 제공하여 기존 모바일 게임과는 차별화된 가치를 제공합니다.

#### Core Features

1.  **텍스트 기반 캐릭터 생성**
    *   **What it does:** 사용자는 100자 이내의 텍스트로 자신만의 캐릭터의 외형, 능력, 배경 등을 자유롭게 설명하여 생성합니다.
    *   **Why it's important:** 게임의 핵심 요소로, 사용자의 창의성을 극대화하고 자신만의 독특한 캐릭터를 소유하는 즐거움을 제공합니다.
    *   **How it works at a high level:** 사용자가 앱 내 입력 필드에 캐릭터 설명을 작성하면, 해당 텍스트는 사용자 계정과 함께 Supabase 데이터베이스에 저장됩니다.

2.  **AI 기반 배틀 시스템 (OpenAI GPT-4.1-mini)**
    *   **What it does:** 두 캐릭터의 텍스트 설명을 입력받아, OpenAI GPT AI 모델이 배틀의 과정과 결과를 판정하고 서술합니다.
    *   **Why it's important:** 매번 새롭고 예측 불가능한 배틀 경험을 제공하며, AI의 창의적인 스토리텔링을 통해 사용자에게 재미를 선사합니다.
    *   **How it works at a high level:** 배틀 시작 시, 두 캐릭터의 설명 텍스트를 OpenAI GPT API에 전달합니다. AI는 이 정보를 바탕으로 배틀 상황, 승패, 주요 장면 등을 포함한 결과를 생성하여 반환합니다.

3.  **배틀 결과 시각화**
    *   **What it does:** AI가 생성한 배틀 결과(승/패), 배틀 상황 해설 텍스트, 그리고 이 해설을 기반으로 생성된 한 장의 이미지를 사용자에게 보여줍니다.
    *   **Why it's important:** 텍스트 기반의 배틀에 시각적인 요소를 더하여 몰입감을 높이고, 배틀의 하이라이트를 직관적으로 전달합니다.
    *   **How it works at a high level:** OpenAI GPT API로부터 배틀 해설 텍스트를 받은 후, 이 텍스트를 다시 OpenAI GPT API(이미지 생성 기능)에 전달하여 관련 이미지를 생성하고, 결과 텍스트와 함께 화면에 표시합니다.

4.  **캐릭터 슬롯 및 배틀 쿨타임 관리 (유료화 모델)**
    *   **What it does:** 기본 제공되는 캐릭터 슬롯 외에 추가 슬롯을 구매하거나, 배틀 후 발생하는 쿨타임을 유료 재화(토큰)를 사용하여 즉시 해제할 수 있다.
    *   **Why it's important:** 게임의 지속적인 운영을 위한 수익 모델을 제공하며, 사용자에게 플레이 방식에 대한 선택권을 부여합니다.
    *   **How it works at a high level:** Google Play 결제 시스템을 연동하여 캐릭터 슬롯 확장 아이템 및 토큰을 판매합니다. 사용자의 구매 내역과 토큰 보유량은 Supabase에 저장 및 관리됩니다.

5.  **리더보드 시스템**
    *   **What it does:** 모든 사용자 캐릭터들의 승리, 패배, 랭킹 등을 집계하여 순위를 보여주는 화면을 제공합니다.
    *   **Why it's important:** 사용자 간의 경쟁심을 자극하고, 게임 플레이의 목표를 제공하여 지속적인 참여를 유도합니다.
    *   **How it works at a high level:** Supabase 데이터베이스에 저장된 각 캐릭터의 배틀 결과를 주기적으로 집계하거나, 실시간 쿼리를 통해 리더보드 데이터를 구성하여 화면에 표시합니다.

6.  **사용자 인증 (로그인)**
    *   **What it does:** 사용자가 계정을 생성하고 로그인하여 자신의 캐릭터, 구매 내역, 배틀 기록 등을 안전하게 관리할 수 있도록 합니다.
    *   **Why it's important:** 개인화된 사용자 경험을 제공하고, 데이터의 연속성을 보장하며, 리더보드 및 유료화 기능을 위해 필수적입니다.
    *   **How it works at a high level:** Supabase Auth를 사용하여 이메일/비밀번호, Google 로그인 등의 인증 방식을 제공합니다.

#### User Experience

*   **User Personas:**
    *   **창의적인 작가형 (Creative Writer):** 자신만의 스토리가 담긴 캐릭터를 만들고, AI가 그 캐릭터를 어떻게 해석하고 배틀을 펼치는지 보는 것을 즐기는 사용자.
    *   **경쟁적인 게이머형 (Competitive Gamer):** 강력한 캐릭터 설명을 통해 높은 승률을 기록하고, 리더보드 상위권에 오르는 것을 목표로 하는 사용자.
    *   **AI 탐험가형 (AI Explorer):** AI의 능력과 한계를 시험해보고, 다양한 텍스트 입력에 대한 AI의 반응을 관찰하는 것을 즐기는 사용자.
    *   **가벼운 재미 추구형 (Casual Player):** 짧은 시간에 독특하고 재미있는 경험을 원하는 사용자.

*   **Key User Flows:**
    1.  **온보딩 및 로그인/회원가입:** 앱 첫 실행 -> 로그인 또는 회원가입 -> 메인 화면 진입.
    2.  **캐릭터 생성:** 메인 화면 -> 캐릭터 생성 버튼 -> 캐릭터 설명 입력 (100자) -> 저장 -> 내 캐릭터 목록에 추가.
    3.  **배틀 시작:** 내 캐릭터 목록에서 배틀할 캐릭터 선택 -> 상대 캐릭터 선택 (랜덤 또는 리스트) -> 배틀 시작.
    4.  **배틀 결과 확인:** 배틀 진행 (AI 처리) -> 배틀 결과 화면 (승패, 해설, 이미지) 표시.
    5.  **리더보드 확인:** 메인 화면 -> 리더보드 버튼 -> 전체 캐릭터 랭킹 확인.
    6.  **인앱 결제:** 캐릭터 슬롯 부족 알림 또는 쿨타임 해제 버튼 -> 결제 페이지 -> 상품 선택 -> 결제 진행 -> 아이템/토큰 획득.

*   **UI/UX Considerations:**
    *   **직관적인 인터페이스:** Jetpack Compose를 활용하여 깔끔하고 현대적인 UI 제공.
    *   **텍스트 중심 디자인:** 캐릭터 설명과 배틀 해설이 잘 보이도록 가독성 높은 폰트와 레이아웃 사용.
    *   **AI 처리 시각적 피드백:** AI가 배틀을 판정하는 동안 로딩 애니메이션 또는 진행 상태 표시.
    *   **간결한 네비게이션:** 사용자가 원하는 기능에 쉽게 접근할 수 있도록 메뉴 구조 단순화.
    *   **매력적인 배틀 결과:** 텍스트와 이미지가 조화롭게 어우러져 배틀의 재미를 극대화.
    *   **부드러운 애니메이션:** 화면 전환 및 UI 요소에 적절한 애니메이션을 사용하여 사용자 경험 향상.

### </PRD>

#### Technical Architecture

*   **System Components:**
    *   **Android Client App:** Jetpack Compose (UI), Kotlin (Logic), ViewModel, Coroutines, Retrofit (for OpenAI GPT API).
    *   **Backend:** Supabase
        *   **Supabase Auth:** 사용자 로그인 및 계정 관리 (이메일/비밀번호, 소셜 로그인 등).
        *   **Supabase Database (PostgreSQL):** 사용자 데이터, 캐릭터 데이터, 배틀 기록, 리더보드 데이터 저장.
        *   **Supabase Edge Functions (Optional):** 서버 측 로직 처리 (예: 복잡한 리더보드 집계, AI 호출 프록시).
        *   **Supabase Storage (Optional):** AI가 생성한 이미지를 캐싱하거나 저장할 경우 사용.
    *   **AI Model:** OpenAI GPT-4.1-mini API (텍스트 기반 배틀 판정, 해설 생성, 이미지 생성).
    *   **Payment Gateway:** Google Play Billing Library.

*   **Data Models (Supabase - PostgreSQL Tables):**
    *   `users` (Table):
        *   `id` (UUID, Primary Key, default: `uuid_generate_v4()`, references `auth.users.id`)
        *   `email` (TEXT, unique)
        *   `display_name` (TEXT, nullable)
        *   `created_at` (TIMESTAMP WITH TIME ZONE, default: `now()`)
        *   `character_slots` (INTEGER, default: 1)
        *   `tokens` (INTEGER, default: 0)
        *   `last_battle_timestamp` (TIMESTAMP WITH TIME ZONE, nullable)
    *   `characters` (Table):
        *   `id` (UUID, Primary Key, default: `uuid_generate_v4()`)
        *   `user_id` (UUID, Foreign Key to `users.id`, on delete cascade)
        *   `description` (TEXT, max 100 chars)
        *   `wins` (INTEGER, default: 0)
        *   `losses` (INTEGER, default: 0)
        *   `rating` (INTEGER, default: 1000)
        *   `created_at` (TIMESTAMP WITH TIME ZONE, default: `now()`)
        *   `last_battle_timestamp` (TIMESTAMP WITH TIME ZONE, nullable)
    *   `battles` (Table, Optional, for battle history or detailed logging):
        *   `id` (UUID, Primary Key, default: `uuid_generate_v4()`)
        *   `player1_character_id` (UUID, Foreign Key to `characters.id`)
        *   `player2_character_id` (UUID, Foreign Key to `characters.id`)
        *   `winner_character_id` (UUID, Foreign Key to `characters.id`, nullable for draw)
        *   `narrative` (TEXT, AI generated battle story)
        *   `generated_image_url` (TEXT, URL to AI generated image, nullable)
        *   `created_at` (TIMESTAMP WITH TIME ZONE, default: `now()`)

*   **APIs and Integrations:**
    *   **OpenAI GPT API:**
        *   Endpoint for text generation (battle narrative, result).
        *   Endpoint for image generation (based on battle narrative).
        *   Secure API key management.
    *   **Supabase Client Library (Kotlin/Java or Ktor for direct HTTP):** For interaction with Supabase Auth, Database, Storage, and Edge Functions.
    *   **Google Play Billing Library:** For in-app purchases.

*   **Infrastructure Requirements:**
    *   Supabase Project (Free or Pro plan depending on usage, especially for Edge Functions and outbound networking for OpenAI GPT API).
    *   OpenAI GPT Project (for enabling OpenAI GPT API and managing API keys).
    *   Android Development Environment (Android Studio).

#### Development Roadmap

*   **MVP Requirements (Phase 1 - Core Loop & Visibility):**
    1.  **Supabase Setup & User Authentication:**
        *   Supabase 프로젝트 생성 및 기본 설정 (Auth, Database).
        *   이메일/비밀번호 기반 회원가입 및 로그인 기능 구현 (Supabase Auth 사용).
    2.  **Basic Character Creation & Display:**
        *   캐릭터 설명(100자) 입력 UI.
        *   생성된 캐릭터를 Supabase Database에 저장 (user 연동).
        *   사용자가 생성한 캐릭터 목록 표시 UI (Supabase Database 쿼리).
        *   기본 캐릭터 슬롯 1개 제공.
    3.  **Core AI Battle Logic (Text Only):**
        *   사용자 캐릭터 1개와 임의의 상대 캐릭터(더미 데이터 또는 다른 유저 캐릭터 중 랜덤 선택) 선택 기능.
        *   선택된 두 캐릭터의 설명을 OpenAI GPT API (text generation)에 전달.
        *   AI가 반환하는 배틀 결과 (승/패 판정 포함) 및 배틀 해설 텍스트 수신.
    4.  **Basic Battle Result UI:**
        *   수신된 배틀 결과 텍스트(승/패, 해설)를 화면에 표시.
        *   캐릭터 승/패 수 Supabase Database에 업데이트.
    5.  **Simple Battle Cooldown:**
        *   배틀 후 일정 시간(예: 5분) 동안 다음 배틀 금지 (캐릭터별 또는 유저별). Supabase Database에 `last_battle_timestamp` 기록 및 확인.

*   **Future Enhancements (Post-MVP):**
    *   **Phase 2 (Visuals, Monetization Basics, Competition):**
        1.  **AI Image Generation in Battles:**
            *   OpenAI GPT API (image generation) 연동.
            *   배틀 해설 텍스트를 기반으로 이미지 생성 요청.
            *   생성된 이미지를 배틀 결과 화면에 표시 (필요시 Supabase Storage 사용).
        2.  **Basic Leaderboard:**
            *   캐릭터의 승리 횟수 또는 레이팅 기반으로 정렬된 리더보드 UI.
            *   Supabase Database 데이터 쿼리 및 표시.
        3.  **In-App Purchase - Character Slots:**
            *   Google Play Billing 연동.
            *   추가 캐릭터 슬롯 구매 기능.
            *   구매 시 `users.character_slots` 업데이트 (Supabase Database).
        4.  **In-App Purchase - Battle Cooldown Skip (Tokens):**
            *   토큰 아이템 구매 기능.
            *   토큰을 사용하여 배틀 쿨타임 즉시 해제 기능.
            *   `users.tokens` 관리 (Supabase Database).
        5.  **UI/UX Polish:**
            *   전반적인 디자인 개선, 애니메이션 추가.
            *   배틀 결과 화면 레이아웃 개선.

    *   **Phase 3 (Engagement & Advanced Features):**
        1.  **Advanced Leaderboard & User Profiles:**
            *   다양한 정렬 기준 (승률, 연승 등) 제공.
            *   다른 유저의 프로필 및 캐릭터 목록 보기.
        2.  **Battle History:**
            *   자신의 이전 배틀 기록 (결과, 상대, 해설, 이미지) 조회 기능.
            *   `battles` 테이블 활용 (Supabase Database).
        3.  **Character Sharing:**
            *   자신의 캐릭터 정보를 텍스트나 이미지 형태로 외부 공유 기능.
        4.  **Notifications (via Supabase Edge Functions or external service):**
            *   배틀 쿨타임 종료 알림.
            *   리더보드 순위 변동 알림 (Optional).
        5.  **Improved AI Prompting:**
            *   더욱 다양하고 흥미로운 배틀 시나리오를 위한 OpenAI GPT 프롬프트 연구 및 개선.
        6.  **Tutorial / Onboarding Flow:**
            *   신규 사용자를 위한 게임 방법 안내.

    *   **Phase 4 (Long-term Vision):**
        1.  **Social Features:**
            *   친구 시스템, 친구 간 배틀 요청.
            *   길드 또는 팀 시스템.
        2.  **Special Events & Themed Battles:**
            *   기간 한정 이벤트, 특정 테마의 캐릭터 배틀.
        3.  **Advanced Character Customization (Beyond Text):**
            *   미리 정의된 아바타 선택 또는 간단한 커스터마이징 요소 추가.
        4.  **AI Model Upgrades:**
            *   새로운 OpenAI GPT 모델 또는 기능 활용.

#### Logical Dependency Chain

1.  **Foundation (Backend & Auth):**
    *   Supabase 프로젝트 설정 (Auth, Database 필수).
    *   Android 프로젝트에 Supabase 클라이언트 라이브러리 연동.
    *   **Visible Front-End:** 로그인/회원가입 화면 및 로직 구현. (사용자 식별이 모든 것의 시작)

2.  **Core Loop - Minimal Viable Battle (Getting to Visible Front-End Quickly):**
    *   **Character Creation:** UI (텍스트 입력) -> Supabase Database 저장 (사용자 ID와 연결).
    *   **Character Display:** Supabase Database에서 내 캐릭터 목록 읽어와서 표시.
    *   **Opponent Selection:** (MVP 단계에서는) Supabase Database의 모든 캐릭터 중 랜덤으로 하나 선택, 또는 고정된 더미 캐릭터 사용.
    *   **Battle Execution (Text Only):**
        *   두 캐릭터의 `description`을 가져와 OpenAI GPT API (text-only) 호출 준비.
        *   OpenAI GPT API 호출 및 응답 (배틀 해설, 승패) 수신.
    *   **Battle Result Display:** 수신된 텍스트를 그대로 화면에 표시.
    *   **Data Update:** 배틀 결과에 따라 캐릭터의 `wins`/`losses` 업데이트 (Supabase Database).

3.  **Iterative Improvements & Feature Additions (Atomic & Buildable):**
    *   **Battle Cooldown:** `last_battle_timestamp` 저장 및 확인 로직 추가 (캐릭터 또는 유저 단위, Supabase Database).
    *   **AI Image Generation:** 기존 배틀 로직에 OpenAI GPT 이미지 생성 API 호출 추가, 결과 화면에 이미지 표시 영역 추가.
    *   **Basic Leaderboard:** Supabase Database 쿼리로 `characters` 테이블에서 `wins` 기준으로 정렬하여 표시하는 새 화면 추가.
    *   **Character Slot Limit:** `users.character_slots` 확인 로직 추가 (Supabase Database).
    *   **In-App Purchase (Slots):** Google Play Billing 연동 -> 슬롯 구매 UI -> 성공 시 `users.character_slots` 업데이트 (Supabase Database).
    *   **In-App Purchase (Tokens & Cooldown Skip):** 토큰 구매 UI -> `users.tokens` 업데이트 -> 쿨타임 스킵 시 토큰 차감 로직 추가 (Supabase Database).
    *   **UI/UX Polish:** 각 기능이 구현된 후, 전반적인 디자인 및 사용자 경험 개선.

#### Risks and Mitigations

*   **Technical Challenges:**
    *   **Risk:** OpenAI GPT API 응답 시간 및 안정성, 예상치 못한 결과 생성.
        *   **Mitigation:** API 호출 타임아웃 설정, 재시도 로직 구현. OpenAI GPT Studio 등을 통해 프롬프트 엔지니어링을 충분히 테스트하여 일관성 있는 결과 유도. 비동기 처리로 UI 블로킹 방지.
    *   **Risk:** OpenAI GPT API 이미지 생성 품질 및 일관성 부족.
        *   **Mitigation:** 이미지 생성 프롬프트를 상세하게 조정. 이미지 생성이 실패하거나 품질이 낮을 경우, 기본 이미지를 표시하거나 텍스트만 보여주는 폴백(fallback) 로직 구현.
    *   **Risk:** Supabase (PostgreSQL) 쿼리 성능 저하 (특히 리더보드).
        *   **Mitigation:** 데이터 모델 설계 시 인덱싱 적극 활용. 필요시 Supabase Edge Functions를 통해 집계 데이터 사전 계산 또는 뷰(View) 활용. MVP에서는 단순 쿼리, 추후 최적화.

*   **Figuring out the MVP that we can build upon:**
    *   **Risk:** MVP 범위가 너무 커지거나, 핵심 가치를 검증하지 못하는 기능을 포함.
        *   **Mitigation:** "Development Roadmap"의 MVP 요구사항을 철저히 준수. 핵심은 '텍스트로 캐릭터 생성 -> AI 배틀 -> 결과 확인' 루프. 다른 부가 기능은 MVP 이후로 연기.

*   **Resource Constraints (Solo Developer Time):**
    *   **Risk:** 개발 시간 부족으로 프로젝트 지연 또는 품질 저하.
        *   **Mitigation:** Supabase와 같은 BaaS를 적극 활용하여 백엔드 개발 부담 최소화. Jetpack Compose의 생산성을 활용. MVP 범위에 집중하고, 이후 단계별로 기능 확장.

*   **AI API Costs & Rate Limits:**
    *   **Risk:** OpenAI GPT API 사용 비용이 예상보다 높아지거나, 호출 빈도로 인한 Rate Limit 도달.
        *   **Mitigation:** 배틀 쿨타임, 캐릭터별 쿨타임 등을 통해 API 호출 빈도 자연스럽게 조절. OpenAI GPT API의 무료 티어 및 가격 정책 숙지. 초기에는 사용량 모니터링하며 필요시 유료화 모델로 비용 충당 고려. Supabase Edge Functions를 프록시로 사용 시, Supabase의 네트워크 비용도 고려.

*   **Content Moderation:**
    *   **Risk:** 사용자가 부적절하거나 공격적인 텍스트로 캐릭터를 생성.
        *   **Mitigation:** OpenAI GPT API 자체의 안전 필터 활용. 초기에는 이 필터에 의존. 추후 사용자 신고 기능 또는 간단한 클라이언트 측 필터링 고려. Supabase의 Row Level Security(RLS)를 활용하여 데이터 접근 제어 강화.

#### Appendix

*   **Research Findings (Assumed):**
    *   AI 기반 게임 및 창작 도구에 대한 사용자 관심 증가 추세.
    *   짧고 반복적인 플레이가 가능한 모바일 게임의 높은 사용자 유지율.
    *   텍스트 기반 RPG 및 스토리텔링 게임의 꾸준한 팬층 존재.
*   **Technical Specifications (Initial):**
    *   **Platform:** Android
    *   **Minimum SDK:** API 24 (Nougat) or API 26 (Oreo) - Jetpack Compose 호환성 고려
    *   **Target SDK:** Latest
    *   **Development Language:** Kotlin
    *   **UI Toolkit:** Jetpack Compose
    *   **Architecture:** MVVM (ViewModel, Repository, UseCases)
    *   **AI Model:** OpenAI GPT-4.1-mini (or latest suitable version)
    *   **Backend:** Supabase (Auth, PostgreSQL Database, Storage, Edge Functions)